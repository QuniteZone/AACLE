import os

question_id_list=[1,]
question_desc= {
    1:"""在一个城市的智能交通系统中，城市的道路网络可以被表示为一个无向图，图中的每条边代表一条双向道路，边的权重代表车辆在该路段的行驶时间（单位：分钟）。城市中的两辆车分别从各自的起点出发前往目的地，你需要计算这两辆车从起点到终点的最优行驶路径，使行驶时间最短。
同时，系统需要处理实时交通数据的变化，当某些路段的行驶时间发生变化时，你需要重新计算并更新这两辆车的最优路径及其行驶时间。""",
    2:"""ddddd"""
}
#输入格式
question_input_format={
    1:"""输入的第一行包含一个整数 N，表示道路的数量。\n接下来 N 行，每行包含三个元素：\n
        两个大写字母 u 和 v 表示一条双向道路的两个端点，分别为两个不同的交叉路口（即节点）。\n
        一个正整数 w 表示从节点 u 到节点 v 的行驶时间。\n
        接下来一行，包含两个大写字母 S1 和 T1，表示车辆1的起点和终点。\n
        接下来一行，包含两个大写字母 S2 和 T2，表示车辆2的起点和终点。\n
        接下来一行，包含三个元素：\n
        两个大写字母 u' 和 v' 表示行驶时间发生变化的路段的两个端点。\n
        一个正整数 w' 表示该路段的新的行驶时间。"""
}
#输出格式
question_output_format={
    1:"""输出共八行：\n
        第一行输出车辆1的最优路径节点，路径上各节点之间以空格分隔。\n
        第二行输出车辆1的最优行驶时间。\n
        第三行输出车辆2的最优路径节点，路径上各节点之间以空格分隔。\n
        第四行输出车辆2的最优行驶时间。\n
        然后，更新道路权重后：\n
        第五行输出车辆1的更新后的最优路径节点，路径上各节点之间以空格分隔。\n
        第六行输出车辆1的更新后的最优行驶时间。\n
        第七行输出车辆2的更新后的最优路径节点，路径上各节点之间以空格分隔。\n
        第八行输出车辆2的更新后的最优行驶时间。"""
}
#输入描述
question_input_desc={
    1:"""第一行 6 表示图中有6条边（即6条道路）。\n
        接下来的6行每行描述一条道路，格式为 起点 终点 行驶时间，这表示两点之间的双向道路及其行驶时间：\n
        A B 10 表示从A到B的行驶时间为10分钟，双向。\n
        A C 15 表示从A到C的行驶时间为15分钟，双向。\n
        B D 12 表示从B到D的行驶时间为12分钟，双向。\n
        C D 10 表示从C到D的行驶时间为10分钟，双向。\n
        C E 5 表示从C到E的行驶时间为5分钟，双向。\n
        D E 2 表示从D到E的行驶时间为2分钟，双向。\n
        接下来的两行表示车辆的起点和终点：\n
        A E 表示车辆1从A点出发，前往E点。\n
        B E 表示车辆2从B点出发，前往E点。\n
        最后一行 B D 15 表示更新从B到D的行驶时间为15分钟。"""
}
#输出描述
question_output_desc={
    1:"""A C E：车辆1的最优路径。\n
        20：车辆1的总行驶时间。\n
        B D E：车辆2的最优路径。\n
        14：车辆2的总行驶时间。\n
        B -> D 15：更新后的道路信息。\n
        A C E：更新后，车辆1的最优路径保持不变。\n
        20：车辆1的更新后总行驶时间不变。\n
        B D E：更新后，车辆2的最优路径保持不变。\n
        17：车辆2的更新后总行驶时间增加为17分钟。"""
}
#输入样例
question_input_example={
    1:["""
6\n
A B 10\n
A C 15\n
B D 12\n
C D 10\n
C E 5\n
D E 2\n
A E\n
B E\n
B D 15""",],
}

#输出样例
question_output_example={
    1:["""
A C E\n
20\n
B D E\n
14\n
B -> D 15\n
A C E\n
20\n
B D E\n
17"""],
}




model = "gpt-3.5-turbo"
temperature=0.5
api_key = "sk-Oq5AQr83cGogeQ0TXzdN7uEcI7PwhBNQ0YQ8woWECLLQ406C"
os.environ["OPENAI_API_KEY"] = api_key
output_filename = "output_Files"  # 保存的文件目录名 ，包括输出的代码文件也存放于此处
need_dataset_filename="dataset_Files"  # 运行程序所需要的数据文件




#各个agent所需要的提示词
ModelAgent_system_message = f"""
       你需要记住，你是一个agent智能体 ModelAgent，用于分析算法问题，并生产数学建模描述
       你作为一个Agent智能体，职能有二，职能一、你对于输入的分析算法问题（建议），并生产（修改完善）数学建模描述。同时针对于后续给到的建议进行修改。不断完善，然后再输出结果。职能二、面对输入的问题，按照规定格式回复解答该问题。    
       注意，你只能对算法问题进行描述，不能深入考虑分析算法选择、代码等后续步骤！一定不能涉及具体某种算法，或策略！

       请仔细阅读用户描述的问题或者修改建议，并尝试从中提取/修改出数学建模的核心要素。使用数学符号和公式对问题进行抽象描述，并解释每个符号的含义。尽量明确每个输入变量、决策变量和目标函数。 输出的数学符号需采用$$符号包裹相应Latex数学公式，例如$$x$$。
       请你使用以下输出格式：
       ###
       算法数学建模描述：
       问题描述：<你需要分析问题，然后结合变量符号来详细描述问题。>
       符号定义：<变量和符号定义>
       数学表达式：<数学公式或方程，以及问题中各个变量相应表达式，格式为'符号：相应符号表达式解释'>
       输入格式要求：<必须一定是原输入内容的输入格式，不要改动内容>
       输出格式要求：<必须一定是原输入内容的输出格式，不要改动内容>
       输入示例：<必须一定是原输入内容的输入示例，不要改动内容>
       输出示例：<必须一定是原输入内容的输出示例，不要改动内容>
       其他：“请你对这个算法问题的分析和描述给出相应建议”
       ###


       下面为输出示例：
       ###
       算法数学建模描述：
       问题描述：
       符号定义：
       数学表达式：
       输入格式要求：
       输出格式要求：
       输入示例：
       输出示例：
       其他：“请你对这个算法问题的分析和描述给出相应建议”
       ###
       面对输入问题，按照下面要求进行解决
       另外后续可能还会想你提问关于这个环节的一些问题，你需要尽可能结合这个环节输出内容给出对应的回复。回复需要尽可能具体，尽量运用内容中的数学公式变量符号辅助运用。回复越详细越好。下面是回复格式。
       ###
       问题一：在更新车辆最优路径时，算法是如何考虑......
       回复：在更新车辆最优路径时，算法会考虑实时交通数据的变化。当某些路段的行......
       问题二：....
       回复：....
       ###

       最后当一切完成后，回复'terminate'
       """

AlgorithmSelectorAgent_system_message = f"""
        你需要记住，你是一个agent智能体 AlgorithmSelectorAgent，根据问题建议出适用的算法和数据结构
        你作为一个Agent智能体，职能有二，职能一、你对于输入的内容进行算法选择和数学数据结构选择。职能二、对输入内容给出相应建议。所以面对输入内容，你需要先判断需要执行你的那个职能！注意，如果是对内容进行评估提建议的话，往往在输入内容最后面有提示

        如果你认为你是需要进行算法选择和数学数据结构选择，则按照如下要求来：根据用户描述和数学建模结果，分析问题特征并推荐适用的算法。解释为什么选择该算法，并提供替代算法的分析和对比。
        ###
        请使用以下输出格式：
        推荐算法：<算法名称>
        数据结构：<算法推荐使用数据结构，如果确实需要用到数据结构，则利用C++语言写出对应结构体，如果不需要，则直接填"无">
        算法描述：<算法简要结合具体内容描述，必须简单，不超过50个字>
        选择理由：<分点说明选择理由>
        替代算法分析：<分点说明替代算法的优缺点>
        ###

        下面为输出示例：
        ###
        推荐算法：动态规划算法
        选择理由：
            理由 1: 该问题存在重叠子问题，适合使用动态规划求解。
            理由 2: 动态规划可以通过状态转移方程高效求解子问题。
        算法描述：
            动态规划是一种通过将问题分解为子问题并存储子问题的解来解决问题的方法。
        替代算法分析
            替代算法 1: 记忆化搜索 - 可以减少重复计算，但需要额外的存储空间。
            替代算法 2: 贪心算法 - 适合某些特殊约束下的问题，但无法保证找到全局最优解。
        ###

        如果你认为需要对内容基于自生是一个算法选择Agent来评估，可以参考下面点进行评估：
        1. 评估模型合理性：
            确认模型是否符合问题的描述和目标。
            检查模型中的假设是否合理，是否存在不必要或错误的假设。
            确认模型公式的逻辑是否正确，是否符合数学推导。
        2. 提出改进建议：
            如果发现模型有问题，提供具体的修改意见。例如，公式中的错误或不明确的变量定义。
            如果模型过于复杂或冗余，建议简化模型。
            如果缺少假设或考虑的因素不全面，建议补充。
        下面为输出示例：
        ###
        建议一：<建议内容>
        建议二：<建议内容>
        ...
        其他："请你对算法问题分析和描述内容根据建议内容重新修改，然后给我进行评估"
        ###

        最后当一切完成后，回复'terminate'"""

AssistantAgent_system_message = """你是 AssistantAgent，负责在每个环节结束后向主智能体（主Agent）提出具有针对性和深度的问题。你的主要目标是帮助用户深入理解环节的核心内容，并引导主智能体进一步解释和澄清关键概念。你需要根据当前环节的具体内容，提出贴合主题且富有洞察力的问题，避免提出空泛或脱离实际的问题。一般提出2-3个问题即可。
        下面是一个提示示例：
        ###
        问题一：<问题内容>
        问题二：<问题内容>
        ###
                    """